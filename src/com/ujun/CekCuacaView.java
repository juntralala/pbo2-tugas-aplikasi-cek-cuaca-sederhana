/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.ujun;

import java.awt.Image;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.FileNotFoundException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.Map;
import java.util.Optional;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

/**
 *
 * @author user
 */
public class CekCuacaView extends javax.swing.JFrame {

    private ArrayList<String> favoriteLocations;
    private static final String API_KEY = "e8e1d3a5dfca785effa389c489922179";
    private Map<String, String> kamusCuaca = Map.of(
            "clear", "Cerah",
            "clouds", "Berawan",
            "rain", "Hujan",
            "thunderstorm", "Badai Berpetir",
            "drizzle", "Gerimis",
            "snow", "Bersalju",
            "mist", "Berkabut",
            "fog", "Berkabut",
            "haze", "Berkabut"
    );

    public CekCuacaView() {
        initComponents();
        iconLabel.setText("");
        this.favoriteLocations = this.loadFavoriteLocations();
//        if (!this.favoriteLocations.isEmpty()) {
//            this.daftarFavoritComboBox.removeItemAt(0);
//        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        textLokasi = new javax.swing.JTextField();
        daftarFavoritComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        buttonCekCuaca = new javax.swing.JButton();
        buttonSimpanFavorit = new javax.swing.JButton();
        buttonExport = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        iconLabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        cuacaLabel = new javax.swing.JLabel();
        buttonImport = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setPreferredSize(new java.awt.Dimension(742, 35));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("Aplikasi Cek Cuaca Sederhana");
        jPanel1.add(jLabel2);

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        daftarFavoritComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pilih" }));
        daftarFavoritComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                daftarFavoritComboBoxItemStateChanged(evt);
            }
        });

        jLabel1.setText("Masukkan Lokasi Kota");

        jLabel3.setText("Pilih Lokasi dari Daftar Favorit");

        buttonCekCuaca.setText("Cek Cuaca");
        buttonCekCuaca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCekCuacaActionPerformed(evt);
            }
        });

        buttonSimpanFavorit.setText("Simpan ke Favorit");
        buttonSimpanFavorit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSimpanFavoritActionPerformed(evt);
            }
        });

        buttonExport.setText("Export Hasil ke CSV");
        buttonExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExportActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Lokasi", "Suhu", "Cuaca", "Tanggal"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jPanel3.setLayout(new java.awt.BorderLayout());

        iconLabel.setText("Icon Label");
        jPanel5.add(iconLabel);

        jPanel3.add(jPanel5, java.awt.BorderLayout.CENTER);

        cuacaLabel.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        cuacaLabel.setText("Cuaca");
        jPanel4.add(cuacaLabel);

        jPanel3.add(jPanel4, java.awt.BorderLayout.SOUTH);

        buttonImport.setText("Import dari CSV");
        buttonImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonImportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addGap(72, 72, 72)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(daftarFavoritComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textLokasi)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(buttonCekCuaca)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonSimpanFavorit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                                .addComponent(buttonExport)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonImport))))
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textLokasi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonCekCuaca)
                    .addComponent(buttonSimpanFavorit)
                    .addComponent(buttonExport)
                    .addComponent(buttonImport))
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(daftarFavoritComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonCekCuacaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCekCuacaActionPerformed
        String lokasi = textLokasi.getText();
        this.cekCuaca(lokasi);
    }//GEN-LAST:event_buttonCekCuacaActionPerformed

    private void buttonSimpanFavoritActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSimpanFavoritActionPerformed
        this.saveFavoriteLocation(textLokasi.getText());
    }//GEN-LAST:event_buttonSimpanFavoritActionPerformed

    private void buttonExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExportActionPerformed
        this.exportToCSV();
    }//GEN-LAST:event_buttonExportActionPerformed

    private void daftarFavoritComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_daftarFavoritComboBoxItemStateChanged
        // Kode mengisi Input Lokasi Ketika Lokasi dipilih dari ComboBox daftar Favorit
        if (daftarFavoritComboBox.getSelectedItem().toString().equalsIgnoreCase("Pilih")) {
            this.textLokasi.setText("");
        } else {
            this.textLokasi.setText(this.daftarFavoritComboBox.getSelectedItem().toString());
        }
    }//GEN-LAST:event_daftarFavoritComboBoxItemStateChanged

    private void buttonImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonImportActionPerformed
        this.importFromCSV();
    }//GEN-LAST:event_buttonImportActionPerformed

    private void cekCuaca(String location) {
        try {
            String encodedLocation = URLEncoder.encode(location, "UTF-8");
            String apiUrl = String.format(
                    "https://api.openweathermap.org/data/2.5/weather?q=%s&lang=id&appid=%s&units=metric",
                    encodedLocation, API_KEY
            );

            URL url = new URL(apiUrl);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");

            BufferedReader reader = new BufferedReader(
                    new InputStreamReader(conn.getInputStream())
            );
            StringBuilder response = new StringBuilder();
            String line;

            while ((line = reader.readLine()) != null) {
                response.append(line);
            }
            reader.close();

            // Parse JSON response
            JSONParser parser = new JSONParser();
            JSONObject jsonResponse = (JSONObject) parser.parse(response.toString());
            JSONObject main = (JSONObject) jsonResponse.get("main");
            JSONObject weather = (JSONObject) ((java.util.List<?>) jsonResponse.get("weather")).get(0);

            double temp = Double.parseDouble(main.get("temp").toString());
            String condition = (String) weather.get("main");
            String kondisi = Optional.ofNullable(this.kamusCuaca.get(condition.toLowerCase()))
                    .orElse(condition);

            // Update UI
            updateWeatherDisplay(location, temp, kondisi);
            addWeatherRecord(location, temp, kondisi);
//            JOptionPane.showMessageDialog(null, response.toString());
        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Lokasi Kota tidak ditemukan, silahkan coba lokasi lainnya");
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this,
                    "Error mengambil data cuaca: " + ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }

    private void updateWeatherDisplay(String location, double temp, String condition) {
        cuacaLabel.setText(String.format(
                "Cuaca di %s: %.1f°C, %s",
                location, temp, condition
        ));

        // Update weather image
        ImageIcon icon = getWeatherIcon(condition);
        if (icon
                != null) {
            iconLabel.setIcon(icon);
        }
    }

    private ImageIcon getWeatherIcon(String condition) {
        String iconPath = "";

        // Menentukan icon berdasarkan kondisi cuaca
        switch (condition.toLowerCase()) {
            case "clear":
            case "cerah":
                iconPath = "/icons/clear.png";
                break;
            case "clouds":
            case "berawan":
                iconPath = "/icons/clouds.png";
                break;
            case "rain":
            case "hujan":
                iconPath = "/icons/rain.png";
                break;
            case "drizzle":
            case "gerimis":
                iconPath = "/icons/drizzle.png";
                break;
            case "thunderstorm":
            case "badai berpetir":
                iconPath = "/icons/thunderstorm.png";
                break;
            case "bersalju":
            case "snow":
                iconPath = "/icons/snow.png";
                break;
            case "mist":
            case "fog":
            case "haze":
            case "berkabut":
                iconPath = "/icons/mist.png";
                break;
            default:
                iconPath = "/icons/default.png";
                break;
        }

        try {
            // Mengambil gambar dari resources
//            JOptionPane.showMessageDialog(null, this.getClass().getResource("resources" + iconPath));
            ImageIcon icon = new ImageIcon(getClass().getResource("resources" + iconPath));

            // Resize gambar ke ukuran yang sesuai (misalnya 50x50 pixel)
            Image img = icon.getImage();
            Image resizedImg = img.getScaledInstance(80, 80, Image.SCALE_SMOOTH);
            return new ImageIcon(resizedImg);

        } catch (Exception e) {
            System.err.println("Error loading weather icon: " + e.getMessage());

            e.printStackTrace();
            return null;
        }
    }

    private void saveFavoriteLocation(String location) {
        if (!favoriteLocations.contains(location)) {
            favoriteLocations.add(location);
            daftarFavoritComboBox.addItem(location);
            saveFavoriteLocationsToFile();
        }
    }

    private ArrayList<String> loadFavoriteLocations() {
        ArrayList<String> locations = new ArrayList<>();
        try {
            File file = new File("favorite_locations.txt");
            if (file.exists()) {
                BufferedReader reader = new BufferedReader(new FileReader(file));
                String line;
                while ((line = reader.readLine()) != null) {
                    locations.add(line);
                    this.daftarFavoritComboBox.addItem(line);
                }
                reader.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return locations;
    }

    private void saveFavoriteLocationsToFile() {
        try {
            FileWriter writer = new FileWriter("favorite_locations.txt");
            for (String location : favoriteLocations) {
                writer.write(location + "\n");
            }
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void addWeatherRecord(String location, double temp, String condition) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.addRow(new Object[]{
            location,
            String.format("%.1f°C", temp),
            condition,
            new SimpleDateFormat("dd-MM-yyyy").format(new Date())
        });
    }

    private void exportToCSV() {
        try {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Simpan File CSV");
            fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter(
                    "CSV files (*.csv)", "csv"));

            if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                if (!file.getName().toLowerCase().endsWith(".csv")) {
                    file = new File(file.getParentFile(), file.getName() + ".csv");
                }

                FileWriter writer = new FileWriter(file);
                for (int i = 0; i < jTable1.getRowCount(); i++) {
                    for (int j = 0; j < jTable1.getColumnCount(); j++) {
                        writer.write(jTable1.getValueAt(i, j).toString());
                        if (j < jTable1.getColumnCount() - 1) {
                            writer.write(",");
                        }
                    }
                    writer.write("\n");
                }
                writer.close();
                JOptionPane.showMessageDialog(this,
                        "Data berhasil diekspor ke CSV",
                        "Sukses",
                        JOptionPane.INFORMATION_MESSAGE
                );
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this,
                    "Error menyimpan file: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }

    private void importFromCSV() {
        try {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Pilih File CSV");
            fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter(
                    "CSV files (*.csv)", "csv"));

            if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                BufferedReader reader = new BufferedReader(new FileReader(file));
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

                // Clear existing table data
                while (model.getRowCount() > 0) {
                    model.removeRow(0);
                }

                String line;
                while ((line = reader.readLine()) != null) {
                    // Split the CSV line by comma
                    String[] data = line.split(",");

                    // Validate data length
                    if (data.length == 4) {
                        // Add row to table
                        model.addRow(new Object[]{
                            data[0].trim(), // Lokasi
                            data[1].trim(), // Suhu
                            data[2].trim(), // Cuaca
                            data[3].trim() // Tanggal
                        });
                    }
                }
                reader.close();

                JOptionPane.showMessageDialog(this,
                        "Data berhasil diimpor dari CSV",
                        "Sukses",
                        JOptionPane.INFORMATION_MESSAGE
                );
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this,
                    "Error membaca file: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CekCuacaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CekCuacaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CekCuacaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CekCuacaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CekCuacaView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCekCuaca;
    private javax.swing.JButton buttonExport;
    private javax.swing.JButton buttonImport;
    private javax.swing.JButton buttonSimpanFavorit;
    private javax.swing.JLabel cuacaLabel;
    private javax.swing.JComboBox<String> daftarFavoritComboBox;
    private javax.swing.JLabel iconLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField textLokasi;
    // End of variables declaration//GEN-END:variables
}
